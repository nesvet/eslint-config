import eslint from "@eslint/js";
import stylistic from "@stylistic/eslint-plugin";
import importPlugin from "eslint-plugin-import";
import importNewlines from "eslint-plugin-import-newlines";
import indentEmptyLines from "eslint-plugin-indent-empty-lines";
import n from "eslint-plugin-n";
import perfectionist from "eslint-plugin-perfectionist";
import react from "eslint-plugin-react";
import unicorn from "eslint-plugin-unicorn";
import globals from "globals";
import tseslint from "typescript-eslint";


export default [
	
	/* Common */
	eslint.configs.recommended,
	{
		plugins: { unicorn },
		rules: {
			/* Possible Problems */
			"array-callback-return": "error",
			// "constructor-super": "error",
			// "for-direction": "error",
			// "getter-return": "error",
			// "no-async-promise-executor": "error",
			// "no-await-in-loop": "off",
			// "no-class-assign": "error",
			// "no-compare-neg-zero": "error",
			// "no-cond-assign": "error",
			// "no-const-assign": "error",
			// "no-constant-binary-expression": "error",
			// "no-constant-condition": "error",
			// "no-constructor-return": "off",
			// "no-control-regex": "error",
			// "no-debugger": "error",
			// "no-dupe-args": "error",
			// "no-dupe-class-members": "error",
			// "no-dupe-else-if": "error",
			// "no-dupe-keys": "error",
			// "no-duplicate-case": "error",
			"no-duplicate-imports": "error",
			// "no-empty-character-class": "error",
			// "no-empty-pattern": "error",
			// "no-ex-assign": "error",
			// "no-fallthrough": "error",
			// "no-func-assign": "error",
			// "no-import-assign": "error",
			"no-inner-declarations": "error",
			// "no-invalid-regexp": "error",
			"no-irregular-whitespace": [ "error", {
				skipStrings: true,
				skipComments: true,
				skipRegExps: true,
				skipTemplates: true,
				skipJSXText: true
			} ],
			// "no-loss-of-precision": "error",
			"no-misleading-character-class": "off",
			// "no-new-native-nonconstructor": "error",
			// "no-obj-calls": "error",
			"no-promise-executor-return": [ "error", { allowVoid: true } ],
			// "no-prototype-builtins": "error",
			// "no-self-assign": "error",
			"no-self-compare": "error",
			// "no-setter-return": "error",
			"no-sparse-arrays": "off",
			"no-template-curly-in-string": "error",
			// "no-this-before-super": "error",
			// "no-undef": "error",
			// "no-unexpected-multiline": "error",
			"no-unmodified-loop-condition": "error",
			// "no-unreachable": "error",
			"no-unreachable-loop": "error",
			// "no-unsafe-finally": "error",
			// "no-unsafe-negation": "error",
			// "no-unsafe-optional-chaining": "error",
			// "no-unused-private-class-members": "error",
			// "no-unused-vars": "error",
			// "no-use-before-define": "off",
			"no-useless-assignment": "error",
			// "no-useless-backreference": "error",
			"require-atomic-updates": "error",
			// "use-isnan": "error",
			// "valid-typeof": "error",
			
			/* Suggestions */
			"accessor-pairs": "error",
			"arrow-body-style": "warn",
			"block-scoped-var": "error",
			camelcase: "warn",
			// "capitalized-comments": "off",
			// "class-methods-use-this": "off",
			// complexity: "off",
			// "consistent-return": "off",
			// "consistent-this": "off",
			curly: [ "warn", "multi" ],
			// "default-case": "off",
			"default-case-last": "error",
			// "default-param-last": "off",
			"dot-notation": "warn",
			eqeqeq: [ "error", "smart" ],
			// "func-name-matching": "off",
			// "func-names": "off",
			// "func-style": "off",
			"grouped-accessor-pairs": "error",
			"guard-for-in": "error",
			// "id-denylist": "off",
			// "id-length": "off",
			// "id-match": "off",
			// "init-declarations": "off",
			"logical-assignment-operators": "error",
			// "max-classes-per-file": "off",
			// "max-depth": "off",
			// "max-lines": "off",
			// "max-lines-per-function": "off",
			// "max-nested-callbacks": "off",
			// "max-params": "off",
			// "max-statements": "off",
			"new-cap": [ "error", { capIsNewExceptionPattern: String.raw`^Intl\..` } ],
			// "no-alert": "off",
			"no-array-constructor": "error",
			"no-bitwise": [ "error", { allow: [ "~" ] } ],
			"no-caller": "error",
			// "no-case-declarations": "error",
			"no-console": [ "warn", { allow: [ "info", "warn", "error" ] } ],
			// "no-continue": "off",
			// "no-delete-var": "error",
			// "no-div-regex": "off",
			"no-else-return": "warn",
			"no-empty": [ "warn", { allowEmptyCatch: true } ],
			"no-empty-function": "error",
			"no-empty-static-block": "error",
			"no-eq-null": "error",
			"no-eval": "error",
			"no-extend-native": "error",
			"no-extra-bind": "error",
			// "no-extra-boolean-cast": "warn",
			"no-extra-label": "warn",
			"no-global-assign": "error",
			"no-implicit-coercion": [ "warn", { allow: [ "!!", "~" ] } ],
			"no-implicit-globals": "error",
			"no-implied-eval": "error",
			// "no-inline-comments": "off",
			"no-invalid-this": "error",
			"no-iterator": "error",
			"no-label-var": "error",
			// "no-labels": "off",
			"no-lone-blocks": "error",
			"no-lonely-if": "warn",
			"no-loop-func": "error",
			// "no-magic-numbers": [ "error", {
			// 	ignore: [ -1, 0, 1, 100, 1000 ],
			// 	ignoreArrayIndexes: true,
			// 	ignoreDefaultValues: true,
			// 	ignoreClassFieldInitialValues: true
			// } ],
			// "no-multi-assign": "off",
			// "no-multi-str": "off",
			"no-negated-condition": "error",
			// "no-nested-ternary": "off",
			// "no-new": "off",
			"no-new-func": "error",
			"no-new-wrappers": "error",
			// "no-nonoctal-decimal-escape": "warn",
			"no-object-constructor": "error",
			// "no-octal": "error",
			"no-octal-escape": "error",
			// "no-param-reassign": "off",
			// "no-plusplus": "off",
			"no-proto": "error",
			// "no-redeclare": "error",
			// "no-regex-spaces": "warn",
			// "no-restricted-exports": "off",
			// "no-restricted-globals": "off",
			// "no-restricted-imports": "off",
			// "no-restricted-properties": "off",
			// "no-restricted-syntax": "off",
			"no-return-assign": "error",
			"no-script-url": "error",
			"no-sequences": "error",
			"no-shadow": "error",
			// "no-shadow-restricted-names": "error",
			// "no-ternary": "off",
			"no-throw-literal": "error",
			// "no-undef-init": "off",
			// "no-undefined": "off",
			// "no-underscore-dangle": "off",
			"no-unneeded-ternary": "warn",
			"no-unused-expressions": "off",
			// "no-unused-labels": "warn",
			"no-useless-call": "error",
			// "no-useless-catch": "error",
			"no-useless-computed-key": "warn",
			"no-useless-concat": "error",
			"no-useless-constructor": "error",
			"no-useless-escape": "error",
			"no-useless-rename": "warn",
			"no-useless-return": "error",
			"no-var": "error",
			// "no-void": "off",
			// "no-warning-comments": "off",
			// "no-with": "error",
			"object-shorthand": "warn",
			// "one-var": "off",
			"operator-assignment": "warn",
			"prefer-arrow-callback": "warn",
			"prefer-const": [ "warn", { destructuring: "all" } ],
			"prefer-destructuring": "error",
			"prefer-exponentiation-operator": "error",
			// "prefer-named-capture-group": "off",
			"prefer-numeric-literals": "error",
			"prefer-object-has-own": "error",
			"prefer-object-spread": "error",
			"prefer-promise-reject-errors": "error",
			"prefer-regex-literals": "error",
			// "prefer-rest-params": "off",
			"prefer-spread": "error",
			"prefer-template": "warn",
			// "radix": "off",
			"require-await": "error",
			// "require-unicode-regexp": "off",
			// "require-yield": "error",
			// "sort-imports": "off",
			// "sort-keys": "off",
			// "sort-vars": "off",
			// "strict": "off",
			"symbol-description": "error",
			// "vars-on-top": "off",
			yoda: "warn",
			
			/* Layout & Formatting */
			// "unicode-bom": "off",
			
			"unicorn/better-regex": "error",
			"unicorn/catch-error-name": "error",
			// "unicorn/consistent-destructuring": "off",
			"unicorn/consistent-empty-array-spread": "error",
			// "unicorn/consistent-existence-index-check": "off",
			// "unicorn/consistent-function-scoping": "off",
			"unicorn/custom-error-definition": "error",
			"unicorn/empty-brace-spaces": "warn",
			"unicorn/error-message": "error",
			"unicorn/escape-case": "error",
			"unicorn/expiring-todo-comments": "error",
			// "unicorn/explicit-length-check": "off",
			// "unicorn/filename-case": "off",
			// "unicorn/import-style": "off",
			"unicorn/new-for-builtins": "error",
			"unicorn/no-abusive-eslint-disable": "error",
			"unicorn/no-anonymous-default-export": "error",
			// "unicorn/no-array-callback-reference": "off",
			"unicorn/no-array-for-each": "warn",
			// "unicorn/no-array-method-this-argument": "off",
			"unicorn/no-array-push-push": "error",
			// "unicorn/no-array-reduce": "off",
			// "unicorn/no-await-expression-member": "off",
			"unicorn/no-await-in-promise-methods": "error",
			// "unicorn/no-console-spaces": "off",
			// "unicorn/no-document-cookie": "off",
			// "unicorn/no-empty-file": "off",
			"unicorn/no-for-loop": "error",
			// "unicorn/no-hex-escape": "off",
			"unicorn/no-instanceof-array": "error",
			"unicorn/no-invalid-fetch-options": "error",
			"unicorn/no-invalid-remove-event-listener": "error",
			// "unicorn/no-keyword-prefix": "off",
			"unicorn/no-lonely-if": "error",
			// "unicorn/no-magic-array-flat-depth": "off",
			// "unicorn/no-negated-condition": "off",
			// "unicorn/no-negation-in-equality-check": "off",
			// "unicorn/no-nested-ternary": "off",
			"unicorn/no-new-array": "error",
			// "unicorn/no-new-buffer": "off",
			// "unicorn/no-null": "off",
			// "unicorn/no-object-as-default-parameter": "off",
			// "unicorn/no-process-exit": "off",
			"unicorn/no-single-promise-in-promise-methods": "error",
			"unicorn/no-static-only-class": "error",
			// "unicorn/no-thenable": "off",
			// "unicorn/no-this-assignment": "off",
			"unicorn/no-typeof-undefined": "error",
			"unicorn/no-unnecessary-await": "error",
			// "unicorn/no-unnecessary-polyfills": "off",
			// "unicorn/no-unreadable-array-destructuring": "off",
			// "unicorn/no-unreadable-iife": "off",
			// "unicorn/no-unused-properties": "off",
			"unicorn/no-useless-fallback-in-spread": "error",
			"unicorn/no-useless-length-check": "error",
			"unicorn/no-useless-promise-resolve-reject": "error",
			"unicorn/no-useless-spread": "error",
			"unicorn/no-useless-switch-case": "error",
			"unicorn/no-useless-undefined": "error",
			"unicorn/no-zero-fractions": "error",
			// "unicorn/number-literal-case": "off",
			// "unicorn/numeric-separators-style": "off",
			"unicorn/prefer-add-event-listener": "error",
			"unicorn/prefer-array-find": "error",
			"unicorn/prefer-array-flat-map": "error",
			"unicorn/prefer-array-flat": "error",
			"unicorn/prefer-array-index-of": "error",
			"unicorn/prefer-array-some": "error",
			"unicorn/prefer-at": "error",
			"unicorn/prefer-blob-reading-methods": "error",
			"unicorn/prefer-code-point": "error",
			"unicorn/prefer-date-now": "error",
			"unicorn/prefer-default-parameters": "error",
			"unicorn/prefer-dom-node-append": "error",
			"unicorn/prefer-dom-node-dataset": "error",
			"unicorn/prefer-dom-node-remove": "error",
			"unicorn/prefer-dom-node-text-content": "error",
			// "unicorn/prefer-event-target": "off",
			"unicorn/prefer-export-from": "error",
			"unicorn/prefer-global-this": "error",
			"unicorn/prefer-includes": "error",
			// "unicorn/prefer-json-parse-buffer": "off",
			"unicorn/prefer-keyboard-event-key": "error",
			"unicorn/prefer-logical-operator-over-ternary": "error",
			"unicorn/prefer-math-min-max": "error",
			// "unicorn/prefer-math-trunc": "off",
			"unicorn/prefer-modern-dom-apis": "error",
			"unicorn/prefer-modern-math-apis": "error",
			"unicorn/prefer-module": "error",
			"unicorn/prefer-native-coercion-functions": "error",
			"unicorn/prefer-negative-index": "error",
			// "unicorn/prefer-node-protocol": "off",
			"unicorn/prefer-number-properties": "error",
			"unicorn/prefer-object-from-entries": "error",
			"unicorn/prefer-optional-catch-binding": "error",
			"unicorn/prefer-prototype-methods": "error",
			// "unicorn/prefer-query-selector": "off",
			"unicorn/prefer-reflect-apply": "error",
			"unicorn/prefer-regexp-test": "error",
			// "unicorn/prefer-set-has": "off",
			"unicorn/prefer-set-size": "error",
			// "unicorn/prefer-spread": "off",
			"unicorn/prefer-string-raw": "error",
			"unicorn/prefer-string-replace-all": "error",
			"unicorn/prefer-string-slice": "error",
			"unicorn/prefer-string-starts-ends-with": "error",
			"unicorn/prefer-string-trim-start-end": "error",
			"unicorn/prefer-structured-clone": "error",
			"unicorn/prefer-switch": "error",
			"unicorn/prefer-ternary": "error",
			"unicorn/prefer-top-level-await": "error",
			"unicorn/prefer-type-error": "error",
			"unicorn/prevent-abbreviations": [ "error", {
				extendDefaultReplacements: false,
				replacements: {
					arr: { array: true },
					cb: { callback: true },
					cur: { current: true },
					curr: { current: true },
					e: { error: true, event: true },
					el: { element: true },
					elem: { element: true },
					err: { error: true },
					ev: { event: true },
					evt: { event: true },
					len: { length: true },
					req: { request: true },
					res: { resource: true, response: true, result: true },
					ret: { returnValue: true },
					retval: { returnValue: true },
					tit: { title: true }
				}
			} ],
			// "unicorn/relative-url-style": "off",
			"unicorn/require-array-join-separator": "error",
			"unicorn/require-number-to-fixed-digits-argument": "error",
			// "unicorn/require-post-message-target-origin": "off",
			// "unicorn/string-content": "off",
			// "unicorn/switch-case-braces": "off",
			"unicorn/template-indent": "error",
			"unicorn/text-encoding-identifier-case": "error",
			"unicorn/throw-new-error": "error"
		}
	},
	
	/* TypeScript */
	...tseslint.configs.recommended,
	{
		rules: {
			"@typescript-eslint/naming-convention": [ "error", {
				selector: [ "variable", "parameter", "classProperty", "objectLiteralProperty" ],
				format: [ "camelCase" ]
			}, {
				selector: "function",
				format: [ "camelCase", "PascalCase" ]
			}, {
				selector: [ "class", "interface", "typeAlias", "enum", "enumMember" ],
				format: [ "PascalCase" ]
			} ],
			"@typescript-eslint/no-this-alias": "off",
			"@typescript-eslint/no-unused-vars": [ "error", {
				argsIgnorePattern: "^_",
				caughtErrorsIgnorePattern: "^_",
				destructuredArrayIgnorePattern: "^_",
				varsIgnorePattern: "^_",
				ignoreRestSiblings: true
			} ],
			"@typescript-eslint/no-unused-expressions": [ "error", { allowShortCircuit: true } ]
		}
	},
	
	/* Node */
	{
		plugins: { n },
		rules: {
			// "n/callback-return": "off",
			// "n/exports-style": "off",
			// "n/file-extension-in-import": "off",
			// "n/global-require": "off",
			"n/handle-callback-err": "error",
			// "n/hashbang": "off",
			// "n/no-callback-literal": "off",
			"n/no-deprecated-api": [ "error", { version: ">=20.0.0" } ],
			// "n/no-exports-assign": "off",
			// "n/no-extraneous-import": "off",
			// "n/no-extraneous-require": "off",
			// "n/no-missing-import": "off",
			// "n/no-missing-require": "off",
			// "n/no-mixed-requires": "off",
			// "n/no-new-require": "off",
			// "n/no-path-concat": "off",
			// "n/no-process-env": "off",
			// "n/no-process-exit": "off",
			// "n/no-restricted-import": "off",
			// "n/no-restricted-require": "off",
			// "n/no-sync": "off",
			// "n/no-unpublished-bin": "off",
			// "n/no-unpublished-import": "off",
			// "n/no-unpublished-require": "off",
			"n/prefer-node-protocol": "error",
			"n/process-exit-as-throw": "error"
		}
	},
	
	/* React */
	{
		files: [ "**/*.{jsx,tsx}" ],
		plugins: { react },
		languageOptions: {
			parserOptions: { ecmaFeatures: { jsx: true } },
			globals: { ...globals.browser }
		},
		settings: {
			react: {
				version: "detect"
			}
		},
		rules: {
			"react/boolean-prop-naming": "error",
			// "react/button-has-type": "off",
			// "react/checked-requires-onchange-or-readonly": "off",
			// "react/default-props-match-prop-types": "off",
			"react/destructuring-assignment": [ "warn", "always", { ignoreClassFields: true } ],
			"react/display-name": "error",
			// "react/forbid-component-props": "off",
			// "react/forbid-dom-props": "off",
			// "react/forbid-elements": "off",
			// "react/forbid-foreign-prop-types": "off",
			// "react/forbid-prop-types": "off",
			// "react/function-component-definition": "off",
			"react/hook-use-state": [ "error", { allowDestructuredState: true } ],
			// "react/iframe-missing-sandbox": "off",
			"react/jsx-boolean-value": "error",
			// "react/jsx-child-element-spacing": "off",
			// "react/jsx-closing-bracket-location": "off",
			// "react/jsx-closing-tag-location": "off",
			// "react/jsx-curly-brace-presence": "off",
			// "react/jsx-curly-newline": "off",
			// "react/jsx-curly-spacing": "off",
			// "react/jsx-equals-spacing": "off",
			// "react/jsx-filename-extension": "off",
			// "react/jsx-first-prop-new-line": "off",
			"react/jsx-fragments": "warn",
			// "react/jsx-handler-names": "off",
			// "react/jsx-indent-props": "off",
			// "react/jsx-indent": "off",
			"react/jsx-key": [ "error", { checkKeyMustBeforeSpread: true, warnOnDuplicates: true } ],
			// "react/jsx-max-depth": "off",
			// "react/jsx-max-props-per-line": "off",
			// "react/jsx-newline": "off",
			// "react/jsx-no-bind": "off",
			// "react/jsx-no-comment-textnodes": "off",
			// "react/jsx-no-constructed-context-values": "off",
			"react/jsx-no-duplicate-props": "error",
			// "react/jsx-no-leaked-render": "off",
			// "react/jsx-no-literals": "off",
			// "react/jsx-no-script-url": "off",
			// "react/jsx-no-target-blank": "off",
			// "react/jsx-no-undef": "off",
			"react/jsx-no-useless-fragment": [ "warn", { allowExpressions: true } ],
			"react/jsx-one-expression-per-line": [ "warn", { allow: "non-jsx" } ],
			// "react/jsx-pascal-case": "off",
			// "react/jsx-props-no-multi-spaces": "off",
			"react/jsx-props-no-spread-multi": "error",
			// "react/jsx-props-no-spreading": "off",
			// "react/jsx-sort-default-props": "off",
			// "react/jsx-sort-props": "off",
			// "react/jsx-space-before-closing": "off",
			// "react/jsx-tag-spacing": "off",
			// "react/jsx-uses-react": "off",
			// "react/jsx-uses-vars": "off",
			// "react/jsx-wrap-multilines": "off",
			// "react/no-access-state-in-setstate": "off",
			// "react/no-adjacent-inline-elements": "off",
			// "react/no-array-index-key": "off",
			// "react/no-arrow-function-lifecycle": "off",
			// "react/no-children-prop": "off",
			// "react/no-danger-with-children": "off",
			// "react/no-danger": "off",
			// "react/no-deprecated": "off",
			// "react/no-did-mount-set-state": "off",
			// "react/no-did-update-set-state": "off",
			// "react/no-direct-mutation-state": "off",
			// "react/no-find-dom-node": "off",
			// "react/no-invalid-html-attribute": "off",
			// "react/no-is-mounted": "off",
			// "react/no-multi-comp": "off",
			// "react/no-namespace": "off",
			// "react/no-object-type-as-default-prop": "off",
			// "react/no-redundant-should-component-update": "off",
			// "react/no-render-return-value": "off",
			// "react/no-set-state": "off",
			// "react/no-string-refs": "off",
			// "react/no-this-in-sfc": "off",
			// "react/no-typos": "off",
			// "react/no-unescaped-entities": "off",
			"react/no-unknown-property": "error",
			// "react/no-unsafe": "off",
			// "react/no-unstable-nested-components": "off",
			// "react/no-unused-class-component-methods": "off",
			"react/no-unused-prop-types": "error",
			// "react/no-unused-state": "error",
			// "react/no-will-update-set-state": "off",
			// "react/prefer-es6-class": "off",
			// "react/prefer-exact-props": "off",
			// "react/prefer-read-only-props": "off",
			"react/prefer-stateless-function": [ "error", { ignorePureComponents: true } ],
			// "react/prop-types": "off",
			// "react/react-in-jsx-scope": "off",
			// "react/require-default-props": "off",
			// "react/require-optimization": "off",
			// "react/require-render-return": "off",
			// "react/self-closing-comp": "off",
			// "react/sort-comp": "off",
			// "react/sort-default-props": "off",
			// "react/sort-prop-types": "off",
			// "react/state-in-constructor": "off",
			// "react/static-property-placement": "off",
			// "react/style-prop-object": "off",
			"react/void-dom-elements-no-children": "error"
		}
	},
	
	/* Formatting */
	{
		plugins: {
			"@stylistic": stylistic,
			import: importPlugin,
			"import-newlines": importNewlines,
			perfectionist,
			"indent-empty-lines": indentEmptyLines
		},
		rules: {
			// "@stylistic/array-bracket-newline": "off",
			"@stylistic/array-bracket-spacing": [ "warn", "always" ],
			// "@stylistic/array-element-newline": "off",
			"@stylistic/arrow-parens": [ "warn", "as-needed" ],
			"@stylistic/arrow-spacing": "warn",
			"@stylistic/block-spacing": "warn",
			"@stylistic/brace-style": [ "warn", "1tbs", { allowSingleLine: true } ],
			"@stylistic/comma-dangle": "warn",
			"@stylistic/comma-spacing": "warn",
			"@stylistic/comma-style": "warn",
			"@stylistic/computed-property-spacing": "warn",
			"@stylistic/curly-newline": "warn",
			"@stylistic/dot-location": [ "warn", "property" ],
			"@stylistic/eol-last": "warn",
			// "@stylistic/function-call-argument-newline": "off",
			"@stylistic/function-call-spacing": "warn",
			// "@stylistic/function-paren-newline": "off",
			"@stylistic/generator-star-spacing": "warn",
			// "@stylistic/implicit-arrow-linebreak": "off",
			"@stylistic/indent": [ "warn", "tab", { SwitchCase: 1, flatTernaryExpressions: true } ],
			"@stylistic/indent-binary-ops": [ "warn", "tab" ],
			"@stylistic/jsx-child-element-spacing": "warn",
			"@stylistic/jsx-closing-bracket-location": [ "warn", "line-aligned" ],
			"@stylistic/jsx-closing-tag-location": [ "warn", "line-aligned" ],
			"@stylistic/jsx-curly-brace-presence": [ "warn", { props: "never", children: "never" } ],
			"@stylistic/jsx-curly-newline": "warn",
			"@stylistic/jsx-curly-spacing": [ "warn", { when: "never", children: true } ],
			"@stylistic/jsx-equals-spacing": "warn",
			"@stylistic/jsx-first-prop-new-line": [ "warn", "multiline" ],
			// "@stylistic/jsx-function-call-newline": "off",
			"@stylistic/jsx-indent": [ "warn", "tab", { checkAttributes: true, indentLogicalExpressions: true } ],
			"@stylistic/jsx-indent-props": [ "warn", { indentMode: "tab", ignoreTernaryOperator: true } ],
			"@stylistic/jsx-max-props-per-line": [ "warn", { maximum: { single: 3, multi: 1 } } ],
			// "@stylistic/jsx-newline": "off",
			// "@stylistic/jsx-one-expression-per-line": "off",
			// "@stylistic/jsx-pascal-case": "off",
			"@stylistic/jsx-props-no-multi-spaces": "warn",
			"@stylistic/jsx-quotes": "warn",
			"@stylistic/jsx-self-closing-comp": "warn",
			// "@stylistic/jsx-sort-props": "off",
			"@stylistic/jsx-tag-spacing": "warn",
			"@stylistic/jsx-wrap-multilines": [ "warn", {
				declaration: "parens-new-line",
				assignment: "parens-new-line",
				return: "parens-new-line",
				arrow: "parens-new-line",
				condition: "parens-new-line",
				logical: "parens-new-line",
				prop: "parens-new-line",
				propertyValue: "parens-new-line"
			} ],
			"@stylistic/key-spacing": "warn",
			"@stylistic/keyword-spacing": "warn",
			// "@stylistic/line-comment-position": "off",
			// "@stylistic/linebreak-style": "off",
			// "@stylistic/lines-around-comment": "off",
			"@stylistic/lines-between-class-members": [ "warn", "always", { exceptAfterSingleLine: true } ],
			// "@stylistic/max-len": "off",
			"@stylistic/max-statements-per-line": "warn",
			"@stylistic/member-delimiter-style": "warn",
			// "@stylistic/multiline-comment-style": "off",
			// "@stylistic/multiline-ternary": "off",
			"@stylistic/new-parens": "warn",
			// "@stylistic/newline-per-chained-call": "off",
			// "@stylistic/no-confusing-arrow": "off",
			
			// https://github.com/eslint-stylistic/eslint-stylistic/issues/310
			// "@stylistic/no-extra-parens": [ "warn", "all", {
			// 	conditionalAssign: false,
			// 	returnAssign: false,
			// 	nestedBinaryExpressions: false,
			// 	ternaryOperandBinaryExpressions: false,
			// 	ignoreJSX: "all",
			// 	enforceForSequenceExpressions: false,
			// 	enforceForNewInMemberExpressions: false,
			// 	enforceForFunctionPrototypeMethods: false,
			// 	allowParensAfterCommentPattern: "@type"
			// } ],
			
			"@stylistic/no-extra-semi": "warn",
			// "@stylistic/no-floating-decimal": "off",
			"@stylistic/no-mixed-operators": "warn",
			"@stylistic/no-mixed-spaces-and-tabs": "error",
			"@stylistic/no-multi-spaces": "warn",
			"@stylistic/no-multiple-empty-lines": "warn",
			"@stylistic/no-tabs": "off",
			"@stylistic/no-trailing-spaces": [ "warn", { skipBlankLines: true } ],
			"@stylistic/no-whitespace-before-property": "warn",
			"@stylistic/nonblock-statement-body-position": [ "warn", "below" ],
			// "@stylistic/object-curly-newline": "off",
			"@stylistic/object-curly-spacing": [ "warn", "always" ],
			// "@stylistic/object-property-newline": "off",
			"@stylistic/one-var-declaration-per-line": "warn",
			"@stylistic/operator-linebreak": [ "warn", "after" ],
			// "@stylistic/padded-blocks": "off",
			"@stylistic/padding-line-between-statements": [
				"warn",
				{ blankLine: "always", prev: "*", next: "return" },
				{ blankLine: "always", prev: "*", next: "throw" }
			],
			"@stylistic/quote-props": [ "warn", "as-needed" ],
			"@stylistic/quotes": [ "warn", "double", { avoidEscape: true } ],
			"@stylistic/rest-spread-spacing": "warn",
			"@stylistic/semi": "warn",
			"@stylistic/semi-spacing": "warn",
			"@stylistic/semi-style": "warn",
			"@stylistic/space-before-blocks": "warn",
			"@stylistic/space-before-function-paren": [ "warn", { anonymous: "always", named: "never", asyncArrow: "always" } ],
			"@stylistic/space-in-parens": "warn",
			"@stylistic/space-infix-ops": [ "warn", { int32Hint: false } ],
			"@stylistic/space-unary-ops": "warn",
			"@stylistic/spaced-comment": [ "warn", "always", {
				line: { markers: [ "/", "#if", "#else", "#elif", "#endif" ], exceptions: [ "/", "-", "+" ] },
				block: { markers: [ "!" ], exceptions: [ "*" ], balanced: true }
			} ],
			"@stylistic/switch-colon-spacing": "warn",
			"@stylistic/template-curly-spacing": "warn",
			"@stylistic/template-tag-spacing": "warn",
			"@stylistic/type-annotation-spacing": "warn",
			"@stylistic/type-generic-spacing": "warn",
			"@stylistic/type-named-tuple-spacing": "warn",
			"@stylistic/wrap-iife": [ "warn", "inside", { functionPrototypeMethods: true } ],
			// "@stylistic/wrap-regex": "off",
			"@stylistic/yield-star-spacing": "warn",
			
			"import/no-empty-named-blocks": "error",
			"import/first": "error",
			"import/newline-after-import": [ "error", { count: 2 } ],
			"import/no-default-export": "warn",
			
			"import-newlines/enforce": [ "warn", { items: 3, "max-len": 120 } ],
			
			// "perfectionist/sort-array-includes": "off",
			// "perfectionist/sort-classes": "off",
			"perfectionist/sort-enums": [ "warn", { type: "natural", partitionByComment: true } ],
			"perfectionist/sort-exports": [ "warn", { type: "natural" } ],
			"perfectionist/sort-imports": [ "warn", {
				type: "natural",
				partitionByComment: true,
				partitionByNewLine: true,
				newlinesBetween: "ignore",
				groups: [
					"electron",
					"@electron",
					"electron-other",
					"bun",
					"builtin",
					"builtin-type",
					"react",
					"external",
					"external-type",
					"nesvet",
					"insite",
					"mui",
					"material-ui",
					"side-effect",
					"side-effect-style",
					"internal",
					"internal-type",
					"parent",
					"parent-type",
					"index",
					"index-type",
					"sibling",
					"sibling-type",
					"object",
					"style",
					"unknown"
				],
				customGroups: {
					value: {
						electron: "^electron$",
						"@electron": "^@electron/.+",
						"electron-other": "^electron-.+",
						bun: [ "^bun$", "^bun-.+" ],
						react: [ "^react$", "^react-.+" ],
						nesvet: "^@nesvet/.+",
						insite: "^insite-.+",
						mui: "^@mui/.+",
						"material-ui": "^@material-ui/.+"
					},
					type: {
						electron: "^electron$",
						"@electron": "^@electron/.+",
						"electron-other": "^electron-.+",
						bun: [ "^bun$", "^bun-.+" ],
						react: [ "^react$", "^react-.+" ],
						nesvet: "^@nesvet/.+",
						insite: "^insite-.+",
						mui: "^@mui/.+",
						"material-ui": "^@material-ui/.+"
					}
				},
				internalPattern: [ String.raw`^[#~@\$]/.+`, String.raw`^[#~\$].*` ]
			} ],
			// "perfectionist/sort-interfaces": "off",
			"perfectionist/sort-jsx-props": [ "warn", {
				type: "natural",
				groups: [
					"className",
					"classes",
					"otherClassName",
					"label",
					"name",
					"type",
					"value",
					"unknown",
					"callback",
					"disabled",
					"otherRef",
					"ref",
					"key"
				],
				customGroups: {
					className: "^className$",
					classes: "^classes$",
					otherClassName: ".+ClassName$",
					label: "^label$",
					name: "^name$",
					type: "^type$",
					value: "^value$",
					callback: "^on.+",
					disabled: "^disabled$",
					otherRef: ".+Ref$",
					ref: "^ref$",
					key: "^key$"
				}
			} ],
			"perfectionist/sort-maps": [ "error", { type: "natural" } ],
			"perfectionist/sort-named-exports": [ "warn", {
				type: "natural",
				ignoreAlias: true,
				groupKind: "values-first",
				partitionByNewLine: true,
				partitionByComment: true
			} ],
			"perfectionist/sort-named-imports": [ "warn", {
				type: "natural",
				ignoreAlias: true,
				groupKind: "values-first",
				partitionByNewLine: true,
				partitionByComment: true
			} ],
			// "perfectionist/sort-object-types": "off",
			// "perfectionist/sort-objects": "off",
			// "perfectionist/sort-switch-case": "off",
			"perfectionist/sort-intersection-types": [ "warn", {
				type: "natural",
				groups: [
					"import",
					"function",
					"conditional",
					"intersection",
					"union",
					"named",
					"operator",
					"object",
					"tuple",
					"literal",
					"keyword",
					"nullish"
				]
			} ],
			"perfectionist/sort-union-types": [ "warn", {
				type: "natural",
				groups: [
					"import",
					"function",
					"conditional",
					"intersection",
					"union",
					"named",
					"operator",
					"object",
					"tuple",
					"literal",
					"keyword",
					"nullish"
				]
			} ],
			// "perfectionist/sort-variable-declarations": "off",
			
			"indent-empty-lines/indent-empty-lines": [ "warn", "tab" ]
		}
	}
	
];
